setcfg main_font "Arial-11"       ;# alternative: Palatino-11, Arial-11
setcfg posbox_font Arial-8

setcfg focus_follows_mouse 1

setcfg editor_bg_color 255
setcfg editor_fg_color 16777215
setcfg posbox_border_color 0
setcfg posbox_bg_color 15654274
setcfg posbox_fg_color 0

bindkey Ctrl-Space mark

bindkey Ctrl-c {cb copy}
bindkey Ctrl-v {cb paste}
bindkey Ctrl-x {cb cut}
bindkey Ctrl-y {cb ppaste}

bindkey Ctrl-u undo

bindkey Ctrl-s save
bindkey Ctrl-b bufman

bindkey Ctrl-f search

bindkey Ctrl-a gohome
bindkey Ctrl-e {go $}
bindkey Ctrl-Left {move prev wnwa}
bindkey Ctrl-Right {move next wnwa}
bindkey Ctrl-Home {go 0}
bindkey Ctrl-End {go -1}

bindkey Ctrl-Backspace {move prev wnwa del}

proc kill_line {} {
   go :0
   mark
   go $
   #TODO: here we should check if we moved and if we didn't just delete one character
   cb cut
}

bindkey Ctrl-k kill_line

proc shell_perform_redirection {redirection} {
   set redirected_descriptor [dict get $redirection redirected_descriptor]
   set open_direction [dict get $redirection open_direction]
   set target [dict get $redirection target]
      
   switch -exact $open_direction {
      ">" {
         if {$redirected_descriptor eq ""} {set redirected_descriptor 1}
         #puts "Sending $redirected_descriptor to $target"
         set fd [fdopen -wronly $target]
         fddup2 $fd $redirected_descriptor
         fdclose $fd
      }
      ">&" {
         if {$redirected_descriptor eq ""} {set redirected_descriptor 1}
         fddup2 $target $redirected_descriptor
      }
      "<" {
         if {$redirected_descriptor eq ""} {set redirected_descriptor 0}
         set fd [fdopen -rdonly $target]
         fddup2 $fd $redirected_descriptor
         fdclose $fd
      }
      "<&" {
         if {$redirected_descriptor eq ""} {set redirected_descriptor 0}
         fddup2 $target $redirected_descriptor
      }
      ">>" {
         if {$redirected_descriptor eq ""} {set redirected_descriptor 1}
         set fd [fdopen -wronly -append $target]
         fddup2 $fd $redirected_descriptor
         fdclose $fd
      }
   }
}

proc shell {args} {
   global backgrounded
   if {!$backgrounded} {
      error "shell called on a non backgrounded interpreter"   
   }

   set special {}
   set normal {}
   
   for {set i 0} {$i < [llength $args]} {incr i} {
      set cur [lindex $args $i]
      set isspecial [regexp {^([0-9]*)(>|>&|<&|<|>>)(.*)$} $cur -> redirected_descriptor open_direction target]
      if {$isspecial} {
         lappend special [dict create redirected_descriptor $redirected_descriptor open_direction $open_direction target $target]
      } else {
         lappend normal $cur
      }
   }
   
   set pid [posixfork]
   if {$pid < 0} {
      error "fork failed in 'shell'"
   }
   
   if {$pid != 0} {
      # parent code, wait and exit
      #puts "waiting for $pid"
      set r [posixwaitpid $pid]
      #puts "wait ended"
      posixexit [lindex $r 1]
   }
   
   # child code, make redirects and exec
   
   #puts "message from child code"
   
   for {set i 0} {$i < [llength $special]} {incr i} {
      shell_perform_redirection [lindex $special $i]
   }
   
   #puts "Executing $normal"
   posixexec {*}$normal
   
   posixexit -1
}
